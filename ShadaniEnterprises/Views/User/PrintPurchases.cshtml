<!DOCTYPE html>
<html lang="en">
@model ShadaniEnterprises.Models.PurchasesList
<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Tell the browser to be responsive to screen width -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>Print Purchases</title>
    <link href="https://netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">

    <style>


        .invoice-title h2, .invoice-title h3 {
            display: inline-block;
        }

        .table > tbody > tr > .no-line {
            border-top: none;
        }

        .table > thead > tr > .no-line {
            border-bottom: none;
        }

        .table > tbody > tr > .thick-line {
            border-top: 2px solid;
        }
        .panel-footer {
            text-align: center;
            position: relative;
        }

            .panel-footer .right {
                position: absolute;
                right: 0;
                /* vertically center the icon */
                top: 50%;
                transform: translateY(-50%);
            }

            .panel-footer .left {
                position: absolute;
                left: 0;
                /* vertically center the icon */
                top: 50%;
                transform: translateY(-50%);
            }

            .panel-footer p {
                font-size: medium;
                padding: 0 20px; /* leave space for the icon adjust this value depending on how big your icon is */
            }
    </style>
</head>
<body>
    <div class="container">
        <div class="row">
            <br><br>
            @for (int x = 0; x < Model.LstPurchases.Count(); x++)
            {

                <div class="col-xs-12">
                    <div class="panel-footer">
                        <img src="../../img/2.png" alt='logo' class="left">
                        <p style="font-size:16px; font-weight:bold">SHADANI ENTERPRISES</p> <p style="font-size:12px; font-weight:bold"> R-96, Evacuee Society, Gulshan-e-Iqbal, Block 10-A, Karachi. <br /> Ph: 021-34156849  www.shadanienterprises.com</p>
                        <h2 class="right" style="font-size:20px; font-weight:bold">Purchases</h2>
                    </div><br />

                    <div class="invoice-title">
                        <strong>Purchase Ref #: @Model.LstPurchases[x].Ref</strong>
                        <strong class="pull-right">Invoice No: @Model.LstPurchases[x].InvoiceNum</strong>
                    </div>


                    <div class="invoice-title">

                        <strong>Company Name: @Model.LstPurchases[x].CompanyName</strong>
                        <strong class="pull-right" id="dateOrigFormat" hidden>@Model.LstPurchases[x].InvoiceDate</strong>
                        <strong class="pull-right" id="dateNewFormat"></strong>
                    </div>
                    <div class="invoice-title">

                        <strong>Address: @Model.LstPurchases[x].Address1</strong><br />
                        <strong>@Model.LstPurchases[x].Address2</strong>
                    </div>
                    <br>
                    <hr>


                </div>
            }
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="panel panel-default">

                    <div class="panel-body">

                        <table class="table table-condensed" id="countit" style="overflow:hidden">
                            <thead>
                                <tr>
                                    <th class="text-center"><strong>S.No</strong></th>
                                    <th class="text-center"><strong>Products</strong></th>
                                    <th class="text-center"><strong>Pack</strong></th>
                                    <th class="text-center"><strong>A/c Unit</strong></th>
                                    <th class="text-center"><strong>Qty</strong></th>
                                    <th class="text-center"><strong>Batch</strong></th>
                                    <th class="text-center"><strong>MFG</strong></th>
                                    <th class="text-center"><strong>EXP</strong></th>
                                    <th class="text-center"><strong>Purchase Rates</strong></th>
                                    <th class="text-right"><strong>Amount</strong></th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int y = 0; y < Model.LstPurchasesDetails.Count(); y++)
                                {
                                    int z = y + 1;
                                    <tr>
                                        <td class="text-center">@z.ToString()</td>
                                        <td class="text-center">@Model.LstPurchasesDetails[y].ProductName</td>
                                        <td class="text-right">@Model.LstPurchasesDetails[y].PackVal</td>
                                        <td class="text-center">@Model.LstPurchasesDetails[y].AcUnit</td>
                                        <td class="text-center">@Model.LstPurchasesDetails[y].prodQty</td>
                                        <td class="text-center">@Model.LstPurchasesDetails[y].prodBatch</td>
                                        <td class="text-right">@Model.LstPurchasesDetails[y].prodMFG</td>
                                        <td class="text-center">@Model.LstPurchasesDetails[y].prodEXP</td>
                                        <td class="text-center">@Model.LstPurchasesDetails[y].purchaseRate</td>
                                        <td class="text-right count-me">@Model.LstPurchasesDetails[y].amount</td>
                                    </tr>
                                }
                                <tr>

                                    <td class="thick-line"></td>
                                    <td class="thick-line"></td>
                                    <td class="thick-line"></td>
                                    <td class="thick-line"></td>
                                    <td class="thick-line"></td>
                                    <td class="thick-line"></td>
                                    <td class="thick-line"></td>
                                    <td class="thick-line"></td>
                                    <td class="thick-line text-center"><strong>Total</strong></td>
                                    <td class="thick-line text-right"><span id="grandTotal" style="font-weight:bold;"></span></td>
                                </tr>

                            </tbody>

                        </table>
                        @*<div style="text-align: center;">
                            <span id="inWords" style="align-self:center"></span>
                        </div>*@

                    </div>
                </div>
            </div>
        </div>  <div>
            <span id="inWords"></span>
        </div><br><br>
        @*<br><br><br><br>*@

        <div class="row">
            <div class="col-xs-6 text-left">
                <address>
                    <strong>__________________________</strong><br>

                    <strong>For: SHADANI ENTERPRISES</strong>
                </address>
            </div>

        </div>

    </div>


    <script src="https://netdna.bootstrapcdn.com/bootstrap/3.1.0/js/bootstrap.min.js"></script>
    <script src="https://code.jquery.com/jquery-1.11.1.min.js"></script>
    <script language="javascript" type="text/javascript">

        $(document).ready(function () {

            var dateOrig = document.getElementById('dateOrigFormat').innerHTML
            var myDate = new Date(dateOrig)
            var date = myDate.getDate();
            var month = myDate.getMonth() + 1;
            var year = myDate.getFullYear();

            document.getElementById('dateNewFormat').innerHTML = 'Invoice Date: ' + date + '/' + month + '/' + year

        });

        var tds = document.getElementById('countit').getElementsByTagName('td');
        var sum = 0;
        for (var i = 0; i < tds.length; i++) {
            if (tds[i].className == 'text-right count-me') {
                sum += isNaN(tds[i].innerHTML) ? 0 : parseFloat(tds[i].innerHTML);
            }
        }

        parseInt(document.getElementById('grandTotal').innerHTML += 'PKR ' + sum.toLocaleString());

        var newSum = sum;

        function numberToEnglish(newSum) {

            var words = new Array();
            words[0] = 'Zero'; words[1] = 'One'; words[2] = 'Two'; words[3] = 'Three'; words[4] = 'Four'; words[5] = 'Five'; words[6] = 'Six'; words[7] = 'Seven'; words[8] = 'Eight'; words[9] = 'Nine'; words[10] = 'Ten'; words[11] = 'Eleven'; words[12] = 'Twelve'; words[13] = 'Thirteen'; words[14] = 'Fourteen'; words[15] = 'Fifteen'; words[16] = 'Sixteen'; words[17] = 'Seventeen'; words[18] = 'Eighteen'; words[19] = 'Nineteen'; words[20] = 'Twenty'; words[30] = 'Thirty'; words[40] = 'Forty'; words[50] = 'Fifty'; words[60] = 'Sixty'; words[70] = 'Seventy'; words[80] = 'Eighty'; words[90] = 'Ninety'; var op;
            newSum = newSum.toString();
            var atemp = newSum.split('.');
            var number = atemp[0].split(',').join('');
            var n_length = number.length;
            var words_string = '';
            if (n_length <= 9) {
                var n_array = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0);
                var received_n_array = new Array();
                for (var i = 0; i < n_length; i++) {
                    received_n_array[i] = number.substr(i, 1);
                }
                for (var i = 9 - n_length, j = 0; i < 9; i++ , j++) {
                    n_array[i] = received_n_array[j];
                }
                for (var i = 0, j = 1; i < 9; i++ , j++) {
                    if (i == 0 || i == 2 || i == 4 || i == 7) {
                        if (n_array[i] == 1) {
                            n_array[j] = 10 + parseInt(n_array[j]);
                            n_array[i] = 0;
                        }
                    }
                }
                value = '';
                for (var i = 0; i < 9; i++) {
                    if (i == 0 || i == 2 || i == 4 || i == 7) {
                        value = n_array[i] * 10;
                    } else {
                        value = n_array[i];
                    }
                    if (value != 0) {
                        words_string += words[value] + ' ';
                    }
                    if ((i == 1 && value != 0) || (i == 0 && value != 0 && n_array[i + 1] == 0)) {
                        words_string += 'Crores ';
                    }
                    if ((i == 3 && value != 0) || (i == 2 && value != 0 && n_array[i + 1] == 0)) {
                        words_string += 'Lakhs ';
                    }
                    if ((i == 5 && value != 0) || (i == 4 && value != 0 && n_array[i + 1] == 0)) {
                        words_string += 'Thousand ';
                    }
                    if (i == 6 && value != 0 && (n_array[i + 1] != 0 && n_array[i + 2] != 0)) {
                        words_string += 'Hundred and ';
                    } else if (i == 6 && value != 0) {
                        words_string += 'Hundred ';
                    }
                }
                words_string = words_string.split(' ').join(' ');
            }
            return words_string;
        }
        function RsPaise(n) {
            nums = n.toString().split('.')
            var whole = numberToEnglish(nums[0])
            if (nums[1] == null) nums[1] = 0;
            if (nums[1].length == 1) nums[1] = nums[1] + '0';
            if (nums[1].length > 2) { nums[1] = nums[1].substring(2, length - 1) }
            if (nums.length == 2) {
                if (nums[0] <= 9) { nums[0] = nums[0] * 10 } else { nums[0] = nums[0] };
                var fraction = numberToEnglish(nums[1])

                if (whole == '' && fraction == '') { op = 'Zero only'; }
                if (whole == '' && fraction != '') { op = fraction + ' paisa ' + ' only'; }
                if (whole != '' && fraction == '') { op = 'Rupees ' + whole + ' only'; }
                if (whole != '' && fraction != '') { op = 'Rupees ' + whole + 'and ' + fraction + ' paisa' + ' only'; }
                amt = newSum
                if (amt > 999999999.99) { op = 'Oops!!! The amount is too big to convert'; }
                if (isNaN(amt) == true) { op = 'Error : Amount in number appears to be incorrect. Please Check.'; }
                document.getElementById('inWords').innerHTML = 'Amount in words: ' + op;
            }
        }
        RsPaise(Math.round(newSum * 100) / 100);

      
        //function numberToEnglish(newSum) {

        //    var string = newSum.toString(), units, tens, scales, start, end, chunks, chunksLen, chunk, ints, i, word, words, and = 'and';

        //    /* Remove spaces and commas */
        //    string = string.replace(/[, ]/g, "");

        //    /* Is number zero? */
        //    if (parseInt(string) === 0) {
        //        return 'zero';
        //    }

        //    /* Array of units as words */
        //    units = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];

        //    /* Array of tens as words */
        //    tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];

        //    /* Array of scales as words */
        //    scales = ['', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sextillion', 'septillion', 'octillion', 'nonillion', 'decillion', 'undecillion', 'duodecillion', 'tredecillion', 'quatttuor-decillion', 'quindecillion', 'sexdecillion', 'septen-decillion', 'octodecillion', 'novemdecillion', 'vigintillion', 'centillion'];

        //    /* Split user arguemnt into 3 digit chunks from right to left */
        //    start = string.length;
        //    chunks = [];
        //    while (start > 0) {
        //        end = start;
        //        chunks.push(string.slice((start = Math.max(0, start - 3)), end));
        //    }

        //    /* Check if function has enough scale words to be able to stringify the user argument */
        //    chunksLen = chunks.length;
        //    if (chunksLen > scales.length) {
        //        return '';
        //    }

        //    /* Stringify each integer in each chunk */
        //    words = [];
        //    for (i = 0; i < chunksLen; i++) {

        //        chunk = parseInt(chunks[i]);

        //        if (chunk) {

        //            /* Split chunk into array of individual integers */
        //            ints = chunks[i].split('').reverse().map(parseFloat);

        //            /* If tens integer is 1, i.e. 10, then add 10 to units integer */
        //            if (ints[1] === 1) {
        //                ints[0] += 10;
        //            }

        //            /* Add scale word if chunk is not zero and array item exists */
        //            if ((word = scales[i])) {
        //                words.push(word);
        //            }

        //            /* Add unit word if array item exists */
        //            if ((word = units[ints[0]])) {
        //                words.push(word);
        //            }

        //            /* Add tens word if array item exists */
        //            if ((word = tens[ints[1]])) {
        //                words.push(word);
        //            }

        //            /* Add 'and' string after units or tens integer if: */
        //            if (ints[0] || ints[1]) {

        //                /* Chunk has a hundreds integer or chunk is the first of multiple chunks */
        //                if (ints[2] || !i && chunksLen) {
        //                    words.push(and);
        //                }

        //            }

        //            /* Add hundreds word if array item exists */
        //            if ((word = units[ints[2]])) {
        //                words.push(word + ' hundred');
        //            }

        //        }

        //    }

        //    return words.reverse().join(' ');

        //}

        //document.getElementById('inWords').innerHTML = 'Amount in words: ' + numberToEnglish(newSum);
       
        
                    //document.getElementById('WHT').innerHTML = parseInt(document.getElementById('grandTotal').innerHTML) * parsef(4.5);
    </script>
</body>
</html>
